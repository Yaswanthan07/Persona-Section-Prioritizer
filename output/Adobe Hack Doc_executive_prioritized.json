{
  "document": "Adobe Hack Doc.pdf",
  "persona": "executive",
  "job_to_be_done": "Prioritize document sections for executive persona based on relevance and importance",
  "processing_timestamp": "2025-07-28T22:24:15.617126",
  "total_sections": 19,
  "sections": [
    {
      "title": "Job-to-be-done: This will be related to the persona (Example",
      "content": "Provide a literature review for a given topic and available research papers, What should I study for Organic Chemistry given the chemistry documents, Summarize the financials of corporation xyz given the detailed year end financial reports etc.) Sample Test Cases Test Case 1: Academic Research Documents: 4 research papers on \"Graph Neural Networks for Drug Discovery\" Persona: PhD Researcher in Computational Biology Job: \"Prepare a comprehensive literature review focusing on methodologies, datasets, and performance benchmarks\" Test Case 2: Business Analysis Documents: 3 annual reports from competing tech companies (2022 -2024) Persona: Investment Analyst Job: \"Analyze revenue trends, RD investments, and market positioning strategies\" Test Case 3: Educational Content Documents: 5 chapters from organic chemistry textbooks Persona: Undergraduate Chemistry Student Job: \"Identify key concepts and mechanisms for exam preparation on reaction kinetics\" Required Output Output JSON format: Refer challenge1b_output.json",
      "page_number": 4,
      "relevance_score": 0.3,
      "importance_rank": 1
    },
    {
      "title": "Introduction",
      "content": "Welcome to the Connecting the Dots Challenge Rethink Reading. Rediscover Knowledge What if every time you opened a PDF, it didnt just sit there it spoke to you, connected ideas, and narrated meaning across your entire library? Thats the future were building and we want you to help shape it. In the Connecting the Dots Challenge, your mission is to reimagine the humble PDF as an intelligent, interactive experience one that understands structure, surfaces insights, and responds to you like a trusted research companion. The Journey Ahead",
      "page_number": 1,
      "relevance_score": 0.0,
      "importance_rank": 2
    },
    {
      "title": "Round 1",
      "content": "Kick things off by building the brains extract structured outlines from raw PDFs with blazing speed and pinpoint accuracy. Then, power it up with on-device intelligence that understands sections and links related ideas together.",
      "page_number": 1,
      "relevance_score": 0.0,
      "importance_rank": 3
    },
    {
      "title": "Round 2",
      "content": "Its showtime! Build a beautiful, intuitive reading webapp using Adobes PDF Embed API. You will be using your Round 1 work to design a futuristic webapp. Why This Matters In a world flooded with documents, what wins is not more content its context. Youre not just building tools youre building the future of how we read, learn, and connect. No matter your background ML hacker, UI builder, or insight whisperer this is your stage. Are you in? Its time to read between the lines. Connect the dots. And build a PDF experience that feels like magic. Lets go. Round 1A: Understand Your Document Challenge Theme: Connecting the Dots Through Docs Your Mission You're handed a PDF but instead of simply reading it, you're tasked with making sense of it like a machine would. Your job is to extract a structured outline of the document essentially the Title, and headings like H1, H2, and H3 in a clean, hierarchical format. This outline will be the foundation for the rest of your hackathon journey. Why This Matters PDFs are everywhere but machines dont naturally understand their structure. By building an outline extractor, youre enabling smarter document experiences, like semantic search, recommendation systems, and insight generation. What You Need to Build",
      "page_number": 1,
      "relevance_score": 0.0,
      "importance_rank": 4
    },
    {
      "title": "You must build a solution that",
      "content": "Accepts a PDF file (up to 50 pages)",
      "page_number": 1,
      "relevance_score": 0.0,
      "importance_rank": 5
    },
    {
      "title": "Extracts",
      "content": "o Title o Headings: H1, H2, H3 (with level and page number)",
      "page_number": 1,
      "relevance_score": 0.0,
      "importance_rank": 6
    },
    {
      "title": "Outputs a valid JSON file in the format below",
      "content": "{ \"title\": \"Understanding AI\", \"outline\": [ { \"level\": \"H1\", \"text\": \"Introduction\", \"page\": 1 }, { \"level\": \"H2\", \"text\": \"What is AI?\", \"page\": 2 }, { \"level\": \"H3\", \"text\": \"History of AI\", \"page\": 3 } ] } You Will Be Provided",
      "page_number": 1,
      "relevance_score": 0.0,
      "importance_rank": 7
    },
    {
      "title": "4. Sample Solution",
      "content": "Docker Requirements Please ensure your Dockerfile is compatible with AMD64 architecture. Since we will build and run the image on an AMD64 machine, your base image and any dependencies should support linuxamd64. Optionally, you can include the following in your Dockerfile to explicitly specify the platform: FROM -- platformlinuxamd64 base_image CPU architecture: amd64 (x86_64) No GPU dependencies Model size (if used) 200MB Should work offline no networkinternet calls Expected Execution",
      "page_number": 2,
      "relevance_score": 0.0,
      "importance_rank": 8
    },
    {
      "title": "We will build the docker image using the following command",
      "content": "docker build --platform linuxamd64 -t mysolutionname:somerandomidentifier After building the image, we will run the solution using the run command specified in the submitted instructions. docker run --rm -v (pwd)input:appinput -v (pwd)output:appoutput -- network none mysolutionname:somerandomidentifier",
      "page_number": 2,
      "relevance_score": 0.0,
      "importance_rank": 9
    },
    {
      "title": "Your container should",
      "content": "Automatically process all PDFs from appinput directory, generating a corresponding filename.json in appoutput for each filename.pdf output.json Constraints Constraint Requirement Execution time 10 seconds for a 50 -page",
      "page_number": 2,
      "relevance_score": 0.0,
      "importance_rank": 10
    }
  ]
}